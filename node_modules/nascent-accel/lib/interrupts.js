'use strict';
var util = require('util');
var EventEmitter = require('events').EventEmitter;
var logger = require('./logger');
var LOG_TAG = 'usb';


var fs = require("fs");
var EV_KEY = 1;
var KEY_F13 = 183;	// ACL_INT1
var KEY_F14 = 184;	// ACL_INT2
var KEY_F15 = 185;	// BAT_PGD_N (active low)
var KEY_F16 = 186;	// BAT_CHG_N (active low)
var KEY_F17 = 187;	// JIG_N (active low)

/*
Input events are of the following form:

struct input_event {
	struct timeval time;
	__u16 type;
	__u16 code;
	__s32 value;
};
where 
struct timeval {
	__kernel_time_t		tv_sec;		** seconds **
	__kernel_suseconds_t	tv_usec;	** microseconds **
};
and __kernel_time_t,  __kernel_suseconds_t are 32 bit values
*/

function Interrupts(callback) {
    var self = this;

    fs.open("/dev/input/by-path/platform-gpio-keys-event", "r", function(err, fd) {
        if (err) throw err;
        var buffer = new Buffer(16);
        function startRead() {
            fs.read(fd, buffer, 0, 16, null, function (err, bytesRead) {
                if (err) throw err;
                //console.log("event", buffer);

                var type = buffer.readInt16LE(8);
                var code = buffer.readInt16LE(10);
                var value = buffer.readInt32LE(12);
                //console.log("type: ", type, " code: ", code, " value: ", value);

                if (type == EV_KEY) {
                	switch (code) {
                	case KEY_F13:
                        self.emit('accel_int1', value); break;
                	case KEY_F14:
                        self.emit('accel_int2', value); break;
                	case KEY_F15:
                		logger.info(LOG_TAG, {event: 'external_power', value: value});
                        self.emit('external_power', value); break;
                	case KEY_F16:
                		logger.info(LOG_TAG, {event: 'charging', value: value});
                        self.emit('charging', value); break;
                	case KEY_F17:
                		logger.info(LOG_TAG, {event: 'jig', value: value});
                        self.emit('jig', value); break;
                	}
               }

                startRead();
            });
        }
        startRead();
    });
    
    if (callback) {
        callback(null, self); 
    }

}

util.inherits(Interrupts, EventEmitter);

module.exports = new Interrupts();
