'use strict';
var util = require('util');
var EventEmitter = require('events').EventEmitter;
var logger = require('./logger');
var LOG_TAG = 'powerkey';


var fs = require("fs");
var EV_KEY = 1;
var KEY_POWER = 116;

/*
Input events are of the following form:

struct input_event {
	struct timeval time;
	__u16 type;
	__u16 code;
	__s32 value;
};
where 
struct timeval {
	__kernel_time_t		tv_sec;		** seconds **
	__kernel_suseconds_t	tv_usec;	** microseconds **
};
and __kernel_time_t,  __kernel_suseconds_t are 32 bit values
*/

function PowerKey(callback) {
    var self = this;

    fs.open("/dev/input/by-path/platform-mid_powerbtn-event", "r", function(err, fd) {
        if (err) throw err;
        var buffer = new Buffer(16);
        function startRead() {
            fs.read(fd, buffer, 0, 16, null, function (err, bytesRead) {
                if (err) throw err;
                //console.log("event", buffer);

                var type = buffer.readInt16LE(8);
                var code = buffer.readInt16LE(10);
                var value = buffer.readInt32LE(12);
                //console.log("type: ", type, " code: ", code, " value: ", value);

                if ((type == EV_KEY) && (code == KEY_POWER)) {
            		logger.info(LOG_TAG, {event: 'powerkey', value: value});
                    self.emit('powerkey', value);
               }

                startRead();
            });
        }
        startRead();
    });
    
    if (callback) {
        callback(null, self); 
    }

}

util.inherits(PowerKey, EventEmitter);

module.exports = new PowerKey();
